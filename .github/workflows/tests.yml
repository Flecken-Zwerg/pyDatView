  
name: 'Tests'

on:
  push:

  pull_request:
    types: [opened, synchronize] #labeled, assigned]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.8, 3.9]

    steps:
      # --- Install steps
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # --- Versioning
      - name: Versioning
        id: versioning
        run: |
          git fetch --unshallow
          export CURRENT_DEV_TAG="v0.3-dev"
          echo "GIT DESCRIBE:      `git describe`"
          echo "GITHUB_REF:        $GITHUB_REF"
          # Check if current version corresponds to a tagged commit
          if [[ $GITHUB_REF == *"tags"* ]]; then 
              echo ">>> This is a tagged version"
              export VERSION_TAG=${GITHUB_REF/refs\/tags\//} 
              export VERSION_NAME=$VERSION_TAG
              export FULL_VERSION_NAME="version $VERSION_NAME"
          else
              echo ">>> This is not a tagged version"
              export VERSION_TAG=$CURRENT_DEV_TAG ;
              export VERSION_NAME=`git describe | sed 's/\(.*\)-.*/\1/'`
              export FULL_VERSION_NAME="latest dev. version $VERSION_NAME"
          fi
          echo "VERSION_TAG        $VERSION_TAG"
          echo "VERSION_NAME:      $VERSION_NAME"
          echo "FULL_VERSION_NAME: $FULL_VERSION_NAME"
          echo "::set-output name=FULL_VERSION_NAME::$FULL_VERSION_NAME"
          echo "::set-output name=VERSION_NAME::$VERSION_NAME"
          echo "::set-output name=VERSION_TAG::$VERSION_TAG"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r _tools/travis_requirements.txt

      - name: System info
        run: |
          echo "Actor : $GITHUB_ACTOR"
          echo "Branch: $GITHUB_REF"
          pip list
          ls

      # --- Run Tests
      - name: Tests
        run: |
          make test

      # --- Check if Deployment if needed
      - name: Check if deployment is needed
        id: check_deploy
        env:
            PY_VERSION: ${{matrix.python-version}}
            GH_EVENT  : ${{github.event_name}}
        run: |
          echo "GH_EVENT    :  $GH_EVENT"
          echo "PY_VERSION  :  $PY_VERSION"
          export OK=0
          # Only deploy for push events
          if [[ $PY_VERSION == "3.9" ]]; then
            if [[ $GH_EVENT == "push" ]]; then 
                export OK=1 ;
            fi
          fi
          echo "DEPLOY      : $OK"
          echo "::set-output name=GO::$OK"

      # --- Run Deployments
      - name: Install system dependencies
        if:  ${{ steps.check_deploy.outputs.GO == '1'}}
        run: sudo apt-get install nsis


      - name: Before deploy
        if:  ${{ steps.check_deploy.outputs.GO == '1'}}
        id: before_deploy
        env:
            FULL_VERSION_NAME:   ${{steps.versioning.outputs.FULL_VERSION_NAME}}
            VERSION_NAME:        ${{steps.versioning.outputs.VERSION_NAME}}
            VERSION_TAG:         ${{steps.versioning.outputs.VERSION_TAG}}
        run: |
          echo "FULL_VERSION_NAME: $FULL_VERSION_NAME"
          echo "VERSION_NAME     : $VERSION_NAME"
          echo "VERSION_TAG      : $VERSION_TAG"
          pip install pynsist
          pip install distlib
          git clone https://github.com/takluyver/pynsist
          mv pynsist/nsist nsist 
          sh _tools/setVersion.sh $VERSION_NAME
          make installer
          mv build/nsis/pyDatView_setup.exe "pyDatView_"$VERSION_NAME"_setup.exe"
          mv _tools/pyDatView.cmd build/nsis/
          mv _tools/pyDatView_Test.bat build/nsis/
          mv _tools/pyDatView.exe build/nsis/
          mv build/nsis build/pyDatView_$VERSION_NAME
          cd build && zip -r "../pyDatView_"$VERSION_NAME"_portable.zip" pyDatView_$VERSION_NAME
          cd ..
          if [[ "$VERSION_TAG" == *"-dev"* ]]; then cp "pyDatView_"$VERSION_NAME"_setup.exe"    "pyDatView_LatestVersion_setup.exe"    ;fi
          if [[ "$VERSION_TAG" == *"-dev"* ]]; then cp "pyDatView_"$VERSION_NAME"_portable.zip" "pyDatView_LatestVersion_portable.zip" ;fi
          ls

      - name: Deploy
        if:  ${{ steps.check_deploy.outputs.GO == '1'}}
        env:
            FULL_VERSION_NAME:  ${{steps.versioning.outputs.FULL_VERSION_NAME}}
            VERSION_NAME:       ${{steps.versioning.outputs.VERSION_NAME}}
            VERSION_TAG:        ${{steps.versioning.outputs.VERSION_TAG}}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: pyDatView_*.*
          release_name: ${{steps.versioning.outputs.FULL_VERSION_NAME}}
          tag:          ${{steps.versioning.outputs.VERSION_TAG}}
          overwrite: true
          file_glob: true
          body: |
             Different development versions are found in the "Assets" below.

             Select the one with the highest number to get the latest development version.

             Use a file labelled "setup" for a windows installer. No admin right is required for this installation, but the application is not signed. You may use a file labelled "portable" for a self contained zip files.
