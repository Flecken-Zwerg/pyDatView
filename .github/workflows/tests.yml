  
name: 'Tests'

on:
  push:

  pull_request:
    types: [opened, synchronize] #labeled, assigned]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6] #, 3.7, 3.8]  # 2.7, 

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: sudo apt-get install nsis

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r _tools/travis_requirements.txt
          pip install -r weio/requirements.txt


      - name: System info
        run: |
          echo "Actor : $GITHUB_ACTOR"
          echo "Branch: $GITHUB_REF"
          pip list
          ls

      - name: Tests
        run: |
          make test

      - name: Versioning
        id: versioning
        run: |
          git fetch --unshallow
          export VERSION_NAME=`git describe | sed 's/\(.*\)-.*/\1/'`
          export FULL_VERSION_NAME="version $VERSION_NAME" 
          echo "GITHUB_REF:        $GITHUB_REF"
          echo "VERSION_NAME      $VERSION_NAME"
          echo "FULL_VERSION_NAME $FULL_VERSION_NAME"
          if [[ $GITHUB_REF == *"tags" ]]; then export VERSION_TAG=${GITHUB_REF/refs\/tags\//} ; fi
          if [[ $GITHUB_REF != *"tags" ]]; then export VERSION_TAG="" ; fi
          echo "VERSION_TAG       $VERSION_TAG"
          if [[ "$VERSION_TAG" == ""     ]]; then export VERSION_TAG="vdev" ; fi
          if [[ "$VERSION_TAG" == "vdev" ]]; then export VERSION_NAME=$VERSION_NAME"-dev" ; fi
          if [[ "$VERSION_TAG" == "vdev" ]]; then export FULL_VERSION_NAME="latest dev. version $VERSION_NAME" ; fi
          echo "VERSION_NAME:      $VERSION_NAME"
          echo "FULL_VERSION_NAME: $FULL_VERSION_NAME"
          echo "::set-output name=FULL_VERSION_NAME::$FULL_VERSION_NAME"
          echo "::set-output name=VERSION_NAME::$VERSION_NAME"
          echo "::set-output name=VERSION_TAG::$VERSION_TAG"

      - name: Test-Versioning
        env:
            FULL_VERSION_NAME:   ${{steps.versioning.outputs.FULL_VERSION_NAME}}
            VERSION_NAME:        ${{steps.versioning.outputs.VERSION_NAME}}
            VERSION_TAG:         ${{steps.versioning.outputs.VERSION_TAG}}
        run: |
            echo "FULL_VERSION_NAME: $FULL_VERSION_NAME"
            echo "VERSION_NAME     : $VERSION_NAME"
            echo "VERSION_TAG      : $VERSION_TAG"

      - name: Before deploy
        if:  ${{ matrix.python-version == '3.6'}}
        env:
            VERSION_NAME:       ${{steps.versioning.outputs.VERSION_NAME}}
        id: before_deploy
        run: |
          echo "VERSION_NAME      $VERSION_NAME"
          pip install pynsist
          pip install distlib
          git clone https://github.com/takluyver/pynsist
          mv pynsist/nsist nsist 
          make installer
          mv build/nsis/pyDatView.exe "pyDatView_"$VERSION_NAME"_setup.exe"
          mv _tools/pyDatView.cmd build/nsis/
          mv _tools/pyDatView.exe build/nsis/
          mv build/nsis build/pyDatView_$VERSION_NAME
          cd build && zip -r "../pyDatView_"$VERSION_NAME"_portable.zip" pyDatView_$VERSION_NAME
          cd ..
          ls

      - name: Deploy
        if:  ${{ matrix.python-version == '3.6'}}
        env:
            FULL_VERSION_NAME:  ${{steps.versioning.outputs.FULL_VERSION_NAME}}
            VERSION_NAME:       ${{steps.versioning.outputs.VERSION_NAME}}
            VERSION_TAG:        ${{steps.versioning.outputs.VERSION_TAG}}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: pyDatView_v*.*
          release_name: ${{steps.versioning.outputs.FULL_VERSION_NAME}}
          tag: vdev
          overwrite: true
          file_glob: true
