import numpy as np
from collections import OrderedDict

# From pydatview imports to WELIB
_WELIB={
    'pydatview.io':'welib.weio',
    'pydatview.tools':'welib.tools',
        }
_PYFAST={
    'pydatview.io':'pyFAST.input_output',
    'pydatview.tools.tictoc':'pyFAST.tools.tictoc',
        }

_flavorReplaceDict={
        'welib':_WELIB,
        'pyFAST':_PYFAST,
        'pydatview':{},
        }

class PythonScripter:
    def __init__(self, libFlavor='pydatview', dfsFlavor='dict', oneTabPerFile=False):


        self.reset()
        self.setFlavor(libFlavor=libFlavor, dfsFlavor=dfsFlavor)

        # Imports that we'll know we'll need
        self.add_import('import pydatview.io as weio')
        self.add_import('from pydatview.tools.tictoc import Timer')
        self.add_import('import matplotlib.pyplot as plt')

    def reset(self):
        self.indent='    '
        self.libFlavor = 'pydatview'
        self.oneTabPerFile = False
        self.dfsRepresentation = 'dict'
        self.import_statements = set()
        self.actions = OrderedDict()
        self.preplot_actions = []
        self.filenames = []
        self.df_selections = []  # List of tuples (df_index, column_x, column_y)
        self.dfs = []
        self.plot_params = {}  # Dictionary for plotting parameters

    def setFlavor(self, libFlavor=None, dfsFlavor=None, oneTabPerFile=None):
        if libFlavor is not None:
            if libFlavor in _flavorReplaceDict.keys():
                self.libFlavor=libFlavor
            else:
                raise Exception('libFlavor not supported' + libFlavor)
        if dfsFlavor is not None:
            if dfsFlavor in ['dict', 'list', 'enumeration']:
                self.dfsRepresentation = dfsFlavor
            else:
                raise Exception('dfsFlavor not supported' + dfsFlavor)
        if oneTabPerFile is not None:
            self.oneTabPerFile = oneTabPerFile


    def add_import(self, import_statement):
        self.import_statements.add(import_statement)

    def add_action(self, action_name, code, import_statements=None):

        for imports in import_statements:
            self.add_import(imports)
            
        self.actions[action_name] = code

    def add_preplot_action(self, code):
        self.preplot_actions.append(code)

    def setFiles(self, filenames):
        self.filenames = [f.replace('\\','/') for f in filenames]

    def select_data(self, df_index, column_x, column_y):
        self.df_selections.append((df_index, column_x, column_y))

    def set_plot_parameters(self, params):
        self.plot_params = params

    def generate_script(self):

        script = []
        indent1= self.indent
        indent2= self.indent+self.indent
        indent3= self.indent+self.indent+self.indent
        # --- Disclaimer
        script.append('""" Script generated by pyDataView - The script will likely need to be adapted."""')

        # --- Add import statements, different for different flavor
        replaceDict=_flavorReplaceDict[self.libFlavor]
        # pydatview imports will be last
        imports = [ 'zzzzz'+ii if ii.find('pydatview')>0 else ii for ii in self.import_statements]
        imports.sort()
        imports = [ ii.replace('zzzzz', '') for ii in imports]
        for statement in imports:
            for k,v, in replaceDict.items():
                statement = statement.replace(k,v)
            script.append(statement)

        # --- List of files
        script.append("\n# --- Script parameters")
        script.append("filenames = []")
        for filename in self.filenames:
            script.append(f"filenames += ['{filename}']")

        # --- List of Dataframes
        script.append("\n# --- Open and convert files to DataFrames")
        if self.dfsRepresentation == 'dict':
            script.append("dfs = {}")
            script.append("for iFile, filename in enumerate(filenames):")
            if self.oneTabPerFile:
                script.append(indent1 + "dfs[iFile] = weio.read(filename).toDataFrame()")
            else:
                script.append(indent1 + "dfs_or_df = weio.read(filename).toDataFrame()")
                script.append(indent1 + "# NOTE: we need a different action if the file contains multiple dataframes")
                script.append(indent1 + "if isinstance(dfs_or_df, dict):")
                script.append(indent2 + "for k,df in dfs_or_df.items():")
                script.append(indent3 + "dfs[k+f'{iFile}'] = df")
                script.append(indent1 + "else:")
                script.append(indent2 + "dfs[f'tab{iFile}'] = dfs_or_df")
        elif self.dfsRepresentation == 'list':
            script.append("dfs = []")
            script.append("for iFile, filename in enumerate(filenames):")
            if self.oneTabPerFile:
                script.append(indent1 + "df = weio.read(filenames[iFile]).toDataFrame()")
                script.append(indent1 + "dfs.append(df)")
            else:
                script.append(indent1 + "# NOTE: we need a different action if the file contains multiple dataframes")
                script.append(indent1 + "dfs = weio.read(filenames[iFile]).toDataFrame()")
                script.append(indent1 + "if isinstance(dfs_or_df, dict):")
                script.append(indent2 + "dfs+= list(dfs_or_df.values() # NOTE: user will need to adapt this.")
                script.append(indent1 + "else:")
                script.append(indent2 + "dfs.append(dfs_or_df)")

        elif self.dfsRepresentation == 'enumeration':
            for iFile, filename in enumerate(self.filenames):
                iFile1 = iFile+1
                if self.oneTabPerFile:
                    script.append(f"df{iFile1} = weio.read(filenames[{iFile}]).toDataFrame()")
                else:
                    script.append("# NOTE: we need a different action if the file contains multiple dataframes")
                    script.append(f"dfs_or_df = weio.read('{filename}').toDataFrame()")
                    script.append("if isinstance(dfs_or_df, dict):")
                    script.append(indent1 + f"df{iFile1} = dfs_or_df.items()[0][1] # NOTE: user will need to adapt this.")
                    script.append("else:")
                    script.append(indent1 + f"df{iFile1} = dfs_or_df")


        if len(self.actions)>0:

            def addActionCode(actioname, actioncode, ind):
                script.append(ind+ "# Apply action {}".format(actioname))
                lines = actioncode.split("\n")
                indented_lines = [ind + line for line in lines]
                script.append("\n".join(indented_lines))

            script.append("\n# --- Apply actions to dataframes")
            if self.dfsRepresentation=='dict':
                script.append("for k, df in dfs.items():")
                for actionname, actioncode in self.actions.items():
                    addActionCode(actionname, actioncode, indent1)

            elif self.dfsRepresentation=='list':
                script.append("for df in dfs):")
                for actionname, actioncode in self.actions.items():
                    addActionCode(actionname, actioncode, indent1)

            elif self.dfsRepresentation=='enumeration':
                for iTab in range(len(self.filenames)):
                    script.append('df = df{}'.format(iTab+1))
                    addActionCode(actionname, actioncode, indent2)

# 


        # --- Plot Styling
        script.append("\n# --- Generate the plot")
        #  Plot Styling
        script.append("# Plot styling")
        script.append("stys=['-','-',':','.-'] * len(dfs)")
        script.append("cols=['r', 'g', 'b'] * len(dfs)")
        if self.dfsRepresentation=='dict':
            script.append("tabNames = list(dfs.keys())")
        script.append("# Subplots")
        script.append("fig,ax = plt.subplots(1, 1, sharey=False, figsize=(6.4,4.8))")
        script.append("fig.subplots_adjust(left=0.12, right=0.95, top=0.95, bottom=0.11, hspace=0.20, wspace=0.20)")

        for df_index, column_x, column_y in self.df_selections:
            script.append("\n# Selecting data for df{}".format(df_index+1))
            if self.dfsRepresentation=='dict':
                script.append("x = dfs[tabNames[{}]]['{}']".format(df_index, column_x))
                script.append("y = dfs[tabNames[{}]]['{}']".format(df_index, column_y))
            elif self.dfsRepresentation=='list':
                script.append("x = dfs[{}]['{}']".format(df_index, column_x))
                script.append("y = dfs[{}]['{}']".format(df_index, column_y))
            elif self.dfsRepresentation=='enumerate':
                script.append("x = df{}['{}']".format(df_index+1, column_x))
                script.append("y = df{}['{}']".format(df_index+1, column_y))
                pass
            if len(self.preplot_actions)>0:
                script.append("# Applying preplot action for df{}".format(df_index+1))
                for preplot_action in self.preplot_actions:
                    script.append(preplot_action)

            script.append("# Plotting for df{}".format(df_index+1))
            script.append("ax.plot(x, y, '-', label='')")


        script.append("ax.set_xlabel('')")
        script.append("ax.set_ylabel('')")
        #script.append("ax.legend()")
        script.append("plt.show()")
#         plot_code = f"""
# plt.figure(figsize=({self.plot_params['figsize']}))
# plt.xlabel('{self.plot_params['xlabel']}')
# plt.ylabel('{self.plot_params['ylabel']}')
# plt.title('{self.plot_params['title']}')
# plt.plot(x, y, label='{self.plot_params['label']}')
# plt.legend()
# plt.show()
# """
#         script.append(plot_code)

        return "\n".join(script)


    def run(self, method='subprocess'):
        script = self.generate_script()
        import tempfile
        import subprocess
        import os
        errors=[]

        if method=='subprocess':
            try:
                # --- Create a temporary file
                #temp_dir = tempfile.TemporaryDirectory()
                #script_file_path = os.path.join(temp_dir.name, "temp_script.py")
                script_file_path ='pydatview_temp_script.py'
                with open(script_file_path, "w") as script_file:
                    script_file.write(script)


                # Run the script as a system call
                result = subprocess.run(["python", script_file_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

                # Print the output and errors (if any)
                #errors.append("Script Output:")
                #errors.append(result.stdout)
                if len(result.stderr)>0:
                    errors.append(result.stderr)
            except Exception as e:
                error.append("An error occurred: {e}")
            finally:
                # Clean up by deleting the temporary directory and its contents
                #temp_dir.cleanup()
                pass
#                 os.remove(script_file_path)
        else:
            raise NotImplementedError()
        if len(errors)>0:
            raise Exception('\n'.join(errors))




if __name__ == '__main__':
    # Example usage:
    scripter = PythonScripter()
    scripter.setFiles(['../DampingExplodingExample.csv'])

    import_statements = ["import numpy as np", "import scipy.stats as stats"]
#     action_code = """df = np.mean(x)
# p_value = stats.ttest_1samp(y, 0)[1]
#     """
    action_code = """df = df"""
    scripter.add_action('filter', action_code, import_statements)
    scripter.select_data(0, "Time", "TTDspFA")
    scripter.add_preplot_action("x = x * 2")
    scripter.add_preplot_action("y = y + 10")

    plot_params = {
        'figsize': (8, 6),
        'xlabel': 'X-Axis',
        'ylabel': 'Y-Axis',
        'title': 'Sample Plot',
        'label': 'Data Series',
    }

    scripter.set_plot_parameters(plot_params)


#     scripter.setFlavor(libFlavor='welib', dfsFlavor='dict')
    scripter.setFlavor(libFlavor='pydatview', dfsFlavor='dict', oneTabPerFile=False)
#     scripter.setFlavor(libFlavor='welib', dfsFlavor='list', oneTabPerFile=True)
#     scripter.setFlavor(libFlavor='welib', dfsFlavor='enumeration', oneTabPerFile=True)
#     scripter.setFlavor(libFlavor='welib', dfsFlavor='enumeration', oneTabPerFile=False)
    script = scripter.generate_script()
    print(script)
    scripter.run()
    import matplotlib.pyplot as plt
    plt.show()

